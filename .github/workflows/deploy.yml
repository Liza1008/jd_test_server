name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: jd-test-server-test

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx create --use
        
        docker buildx build \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --platform linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --push \
          .
        
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Download task definition
      id: download-task-def
      run: |
        aws ecs describe-task-definition --task-definition jd-test-server-test --query taskDefinition > task-definition.json

    - name: Modify task definition
      id: modify-task
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: jd-test-server-test
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: ecs-deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.modify-task.outputs.task-definition }}
        service: jd-test-server-test-service
        cluster: jd-test-server-test-cluster
        wait-for-service-stability: true

    - name: Check if deployment was successful
      id: check-deployment
      run: |
        CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster jd-test-server-test-cluster --services jd-test-server-test-service --query services[0].deployments[0].taskDefinition | jq -r ".")
        NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
        echo "Current task arn: $CURRENT_TASK_DEF_ARN"
        echo "New task arn: $NEW_TASK_DEF_ARN"
        if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
          FAILED_TASK_REASON=$(aws ecs describe-tasks --cluster jd-test-server-test-cluster --tasks arn:aws:ecs:eu-west-3:955549159979:task/jd-test-server-test-cluster/3a49452239244412a0111d3748b50ee0 --query 'tasks[].containers[].reason' --output text)
          echo 'Deployment failed. "$FAILED_TASK_REASON"'
          exit 1
        fi